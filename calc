/*
calc.y
calc.l
yacc -d calc.y
 ls -l (y.tab.c , y.tab.l)
lex calc.l
ls -l (lex.yy.c)
gcc lex.yy.c y.tab.c -o calc
./calc

*/


//calc.y
%{

void yyerror (char *s);
int yylex();
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int symbols[52];
int symbolVal(char symbol);
void updateSymbolVal(char symbol , int val);

%}



































%union {int num ; char id;}
%start line
%token print
%token exit_command
%token <num> number
%token <id> identifier
%type <num> line exp term
%type <id> assignment

%%


line : assignment ';'           {;}
     | exit_command ';'         {exit(EXIT_SUCCESS);}
     | print exp ';'            {printf("printing %d\n",$2);}
     | line assignment ';'      {;}
     | line print exp ';'       {printf("printing %d\n",$3);}
     | line exit_command ';'    {exit(EXIT_SUCCESS);}
     ;

assignment : identifier '=' exp {updateSymbolVal($1 , $3);}
           ;

exp     : term                  {$$ = $1 ; }
        | exp '+' exp           {$$ = $1 + $3 ; }
        | exp '-' exp           {$$ = $1 - $3 ; }
        | exp '*' exp           {$$ = $1 * $3 ; }
        ;

term    : identifier            {$$ = symbolVal($1);}
        | number                {$$ = $1 ; }
        ;
%%

int computeSymbolIndex(char token)
{

        int idx = -1;
        if (islower(token)){

                idx = token - 'a' + 26 ;

        }else{

                idx  = token - 'A';
        }
        return idx;
}

int symbolVal(char symbol)
{
        int ind = computeSymbolIndex(symbol);
        return symbols[ind];

}


void updateSymbolVal(char symbol , int val)
{

        int ind = computeSymbolIndex(symbol);
        symbols[ind] = val;

}

int main(void){

        int i ;
        for (i =0 ; i< 52 ; i++)
        {
                symbols[i] = 0;
        }

        return yyparse();

}

void yyerror ( char *s) { fprintf (stderr , "%s\n" , s);}



//calc.l
%{

#include "y.tab.h"
void yyerror(char *s);
int yylex();

%}
%%

"print"         {return print;}
"exit"          {return exit_command;}
[a-zA-Z]        {yylval.id = yytext[0] ; return identifier;}
[0-9]+          {yylval.num = atoi(yytext); return number;}
[ \t\n]         ;
[+*=;-]         {return yytext[0];}
.               {ECHO; yyerror("unexpected character");}


%%
int yywrap(void) { return 1;}



